version: "3.6"

networks:
  frontend:
  backend:
services:

  db:
    image: postgres:14
    networks:
      - backend
    volumes:
      - "dbdata:/var/lib/postgresql/data"
    ports:
      - "${DB_EXT_PORT}:5432"
    environment:
      - POSTGRES_DB=cdefense
      - POSTGRES_USER=cdefense
      - POSTGRES_PASSWORD=cd3f3ns3
    restart: on-failure
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "cdefense"]
      interval: 30s
      timeout: 3s

  recommendation:
    image: "cdefense/recommendation-service:latest"
    labels:
      - "traefik.http.routers.recommendation.rule=PathPrefix(/recommendation)"
      - "traefik.http.services.recommendation.loadbalancer.server.port=3000"
    ports:
      - "${RECOMMENDATION_EXT_PORT}:3000"
    environment:
      - POSTGRES_NAME=postgres
      - POSTGRES_DB=cdefense
      - POSTGRES_USER=cdefense
      - POSTGRES_PASSWORD=cd3f3ns3
      - POSTGRES_HOST=db
      - JWT_SECRET=scasdaf3423csaca2341ASds23E2
    depends_on:
      - db

  keycloak:
    image: quay.io/keycloak/keycloak:18.0.0
    labels:
      - "traefik.http.routers.keycloak.rule=PathPrefix(/auth)"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
    networks:
      - backend
    ports:
      - "${KEYCLOAK_EXT_PORT}:8080"
    environment:
      - KEYCLOAK_ADMIN=authadmin
      - KEYCLOAK_ADMIN_PASSWORD=cd3f3ns3
      - KC_DB_URL_HOST=db
      - KC_DB_URL_PORT=5432
      - KC_DB_URL_DATABASE=cdefense
      - KC_DB_USERNAME=cdefense
      - KC_DB_PASSWORD=cd3f3ns3
      - KC_DB=postgres
      - KC_LOG_LEVEL=INFO
      - KC_HOSTNAME_STRICT=false
      - KC_HTTP_RELATIVE_PATH=/auth
    entrypoint: /opt/keycloak/bin/kc.sh start-dev
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/auth/realms/master" ]
      interval: 10s
      timeout: 2s
      retries: 5
      start_period: 15s
    depends_on:
      - db

  authservice:
    image: cdefense/auth-service:${CD_RELEASE_TAG}
    labels:
      - "traefik.http.routers.authservice.rule=PathPrefix(`/cd-auth`)"
      - "traefik.http.services.authservice.loadbalancer.server.port=8080"
    networks:
      - backend
    ports:
      - "${AUTHSERVICE_EXT_PORT}:8080"
    environment:
      - MICRONAUT_SECURITY_TOKEN_JWT_SIGNATURES_JWKS_KEYCLOAK_URL=http://keycloak:8080/auth/realms/cdefense/protocol/openid-connect/certs
      - CLOUDDEFENSE_AUTH_KEYCLOAK_REALM_KEY=cdefense
      - CLOUDDEFENSE_HASURA_ADMIN_SECRET=cd3f3ns3
      - CLOUDDEFENSE_AUTH_KEYCLOAK_URL=http://keycloak:8080/auth
      - CLOUDDEFENSE_HEROKUAPP_GRAPHQL_URL=http://graphql:8080/v1/graphql
      - CLOUDDEFENSE_AUTH_DEPLOYMENT_MODE_DOCKER=true
      - CLOUDDEFENSE_AUTH_KEYCLOAK_ADMIN_USER=authadmin
      - CLOUDDEFENSE_AUTH_KEYCLOAK_ADMIN_PASSWORD=cd3f3ns3
      - CLOUDDEFENSE_API_URL=http://api:8080
      - CLOUDDEFENSE_BASE_URL=http://${CD_SERVER_HOST}
    restart: on-failure
    healthcheck:
      test: [ "CMD", "nc", "-z", "127.0.0.1", "8080" ]
      interval: 30s
      timeout: 3s
    depends_on:
      - keycloak

  graphql:
    image: cdefense/graphql:${CD_RELEASE_TAG}
    labels:
      - "traefik.http.routers.graphql.rule=PathPrefix(`/v1/graphql`) || PathPrefix(`/v1alpha1/`) || PathPrefix(`/console/`) || PathPrefix(`/v1/query`)"
      - "traefik.http.services.graphql.loadbalancer.server.port=8080"
    networks:
      - backend
      - frontend
    ports:
      - "${GRAPHQL_EXT_PORT}:8080"
    environment:
      - HASURA_GRAPHQL_DATABASE_URL=postgres://cdefense:cd3f3ns3@db:5432/cdefense
      - HASURA_GRAPHQL_ENABLE_CONSOLE=true
      - HASURA_GRAPHQL_ADMIN_SECRET=cd3f3ns3
      - 'HASURA_GRAPHQL_JWT_SECRET={
        "type": "RS256",
        "jwk_url": "http://keycloak:8080/auth/realms/cdefense/protocol/openid-connect/certs"
        }'
      - HASURA_GRAPHQL_UNAUTHORIZED_ROLE=anonymous
      - HASURA_GRAPHQL_NO_OF_RETRIES=10
      - HASURA_GRAPHQL_ENABLE_TELEMETRY=false
      - HASURA_GRAPHQL_DEV_MODE=true
    restart: on-failure
    healthcheck:
      test:
        [
            "CMD",
            "wget",
            "--quiet",
            "--spider",
            "http://127.0.0.1:8080/v1/version",
        ]
      interval: 30s
      timeout: 3s
    depends_on:
      - db
      - authservice
  seed:
    image: cdefense/scandb-seed:local
    networks:
      - backend
    volumes:
      - "bootstrap:/bootstrap"
    restart: on-failure
    environment:
      - PGHOST=db
      - PGPORT=5432
      - PGDATABASE=cdefense
      - PGUSER=cdefense
      - PGPASSWORD=cd3f3ns3
    depends_on:
      - graphql
      - db
    command: ["./wait-for", "graphql:8080", "--", "./seed_db.sh"]

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    networks:
      - backend
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: docker.io/bitnami/kafka:3.1
    networks:
      - backend
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=-1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - "kafka_data:/bitnami"
    depends_on:
      - zookeeper

  api:
    image: cdefense/scan-api:${CD_RELEASE_TAG}
    labels:
      - "traefik.http.routers.api.rule=Path(`/processAndSave`) || PathPrefix(`/scan/`) || PathPrefix(`/integration/`)"
      - "traefik.http.services.api.loadbalancer.server.port=8080"
    networks:
      - backend
    volumes:
      - "bootstrap:/bootstrap"
    restart: on-failure
    ports:
      - "${API_EXT_PORT}:8080"
    environment:
      - FULL_SCAN_DOCKER_IMAGE=cdefense/fullscan:v2
      - DB_CONNECTION_STRING=jdbc:postgresql://db:5432/cdefense
      - DB_USER=cdefense
      - MICRONAUT_SECURITY_ENABLED=true
      - MICRONAUT_SECURITY_TOKEN_JWT_BEARER_ENABLED=true
      - KEYCLOAK_ENABLED=true
      - MICRONAUT_SECURITY_TOKEN_JWT_SIGNATURES_JWKS_KEYCLOAK_URL=http://keycloak:8080/auth/realms/cdefense/protocol/openid-connect/certs
      - DB_PASSWORD=cd3f3ns3
      - CLOUDDEFENSE_HEROKUAPP_GRAPHQL_URL=http://graphql:8080/v1/graphql
      - HASURA_GRAPHQL_ADMIN_SECRET=cd3f3ns3
      - CVE_LOOKUP_DB_TYPE=VFEED
      - CLOUDDEFENSE_WEBCONSOLE_HOST_URL=http://${CD_SERVER_HOST}/applications/general/details
      - CLOUDDEFENSE_WEBCONSOLE_CONTAINER_SCAN_URL=http://${CD_SERVER_HOST}/applications/container/details
      - CLOUDDEFENSE_WEBCONSOLE_TERRAFORM_SCAN_URL=http://${CD_SERVER_HOST}/applications/terraform/details
      - CLOUDDEFENSE_WEBCONSOLE_KUBERNETES_SCAN_URL=http://${CD_SERVER_HOST}/applications/kube/details
      - CLOUDDEFENSE_WEBCONSOLE_SERVERLESS_SCAN_URL=http://${CD_SERVER_HOST}/applications/serverless/details
      - DATA_VFEED_SQLITE_FULL_REFRESH_CRON_EXPRESSION=0 */2 * * *
      - KAFKA_SERVERS=kafka:9092
    healthcheck:
      test: ["CMD", "nc", "-z", "127.0.0.1", "8080"]
      interval: 30s
      timeout: 3s
    depends_on:
      - graphql
      - db
      - kafka
    command: ["./run.sh"]
  data:
    image: cdefense/scan-data:${CD_RELEASE_TAG}
    networks:
      - backend
    volumes:
      - "bootstrap:/bootstrap"
    restart: on-failure
    ports:
      - "${DATA_EXT_PORT}:8080"
    environment:
      - DB_CONNECTION_STRING=jdbc:postgresql://db:5432/cdefense
      - DB_USER=cdefense
      - DB_PASSWORD=cd3f3ns3
      - CLOUDDEFENSE_HEROKUAPP_GRAPHQL_URL=http://graphql:8080/v1/graphql
      - HASURA_GRAPHQL_ADMIN_SECRET=cd3f3ns3
      - VFEED_SYNC_JOB_CRON_EXPRESSION=0 */2 * * *
    healthcheck:
      test: ["CMD", "nc", "-z", "127.0.0.1", "8080"]
      interval: 30s
      timeout: 3s
    depends_on:
      - graphql
      - db
      - kafka
    command: ["./run.sh"]
  web:
    image:  cdefense/webconsole:${CD_RELEASE_TAG}
    labels:
      - "traefik.http.routers.web.rule=PathPrefix(`/`)"
      - "traefik.http.routers.web.priority=1"
      - "traefik.http.services.web.loadbalancer.server.port=80"
    networks:
      - frontend
    volumes:
      - "bootstrap:/bootstrap"
    restart: on-failure
    ports:
      - "${WEB_EXT_PORT}:80"
    environment:
      - GRAPHQL_ENDPOINT=http://${CD_SERVER_HOST}:${GRAPHQL_EXT_PORT}/v1/graphql
      - AUTH_STAGE=dockerStaging
      - CUBEJS_ENDPOINT=http://${CD_SERVER_HOST}:${CUBE_EXT_PORT}/cubejs-api/v1
      - CUBEJS_TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
      - API_ENDPOINT=http://${CD_SERVER_HOST}:${API_EXT_PORT}
      - AUTH_ENDPOINT=http://${CD_SERVER_HOST}:${AUTHSERVICE_EXT_PORT}
      - RECOMMENDATIONS_ENDPOINT=http://${CD_SERVER_HOST}:${RECOMMENDATION_EXT_PORT}
      - ONPREM_ENABLED=cdefense
    healthcheck:
      test: ["CMD", "nc", "-z", "127.0.0.1", "80"]
      interval: 30s
      timeout: 3s
    depends_on:
      - graphql
    command: ["./wait-for", "graphql:8080", "--", "./run.sh"]
  cube:
    image: cdefense/cubejs-cd:${CD_RELEASE_TAG}
    labels:
      - "traefik.http.routers.cube.rule=PathPrefix(`/cubejs-api`)"
      - "traefik.http.services.cube.loadbalancer.server.port=4000"
    networks:
      - frontend
      - backend
    volumes:
      - "bootstrap:/bootstrap"
    restart: on-failure
    ports:
      - "${CUBE_EXT_PORT}:4000"
    environment:
      - CUBEJS_API_SECRET=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
      - CUBEJS_DB_HOST=db
      - CUBEJS_DB_NAME=cdefense
      - CUBEJS_DB_USER=cdefense
      - CUBEJS_DB_PASS=cd3f3ns3
      - CUBEJS_DB_TYPE=postgres
      - CUBEJS_CACHE_AND_QUEUE_DRIVER=memory
    healthcheck:
      test: ["CMD", "nc", "-z", "127.0.0.1", "4000"]
      interval: 30s
      timeout: 3s
    depends_on:
      - db
      - web
    command: ["/usr/src/app/wait-for", "db:5432", "--", "node", "/usr/src/app/index.js"]

  webserver:
    container_name: webserver
    restart: unless-stopped
    image: staticfloat/nginx-certbot
    ports:
      - 80:80/tcp
      - 443:443/tcp
    environment:
      - ENVSUBST_VARS=SERVER_DOMAIN
      - CERTBOT_EMAIL=developer@clouddefense.ai
      - SERVER_DOMAIN=demo.clouddefenseai.com
    volumes:
      - ./conf:/etc/nginx/user.conf.d:rw
      - letsencrypt:/etc/letsencrypt
    depends_on:
      - web
    networks:
      - frontend
      - backend

volumes:
  bootstrap:
  dbdata:
  zookeeper_data:
  kafka_data:
  letsencrypt:
